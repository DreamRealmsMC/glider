


v0.3 - api, send commands
v0.4 - logging, default cluster
v0.5 - messages, permissions
v0.6 - status, available servers
v0.7 - permissions, restricted servers
v0.8 - placeholders
v0.9 - limbo mechanic
v1.0.0 - first addons, glider paper, cluster rewards


? only executes when not set or step fails
0 executes if not skipped

0   @Event find players             (Players -rw)
?   @Event find target group        (Players -r, Cluster -r)
0   @Event restricted servers       (Players -rw, Group -r)
0?  @Event available servers        (UnrestrictedServers -r, Players number -r)
0?  @Event find best server list    (AvailableServers -r, Players -r)
    @Event Pre transfer             (SenderResponse -r)





/*
PingSubcommand pingCommand = new PingSubcommand();
gliderCommand.registerAsDual(pingCommand, "ping", "latency");
gliderCommand.registerSubcommandProvider(new PingSubcommand());
*/



database:
  ip: 127.0.0.1
  port: 3306
  username: "username"
  password: "yourpassword"
  databaseName: "database"
  maxPoolSize: 1500

package eu.lenithia.glider.sender.listeners;

import com.google.inject.Inject;
import com.velocitypowered.api.event.Subscribe;
import com.velocitypowered.api.proxy.Player;
import eu.lenithia.glider.GliderVelocity;
import eu.lenithia.glider.clusters.system.GServer;
import eu.lenithia.glider.sender.events.SenderResponseEvent;
import eu.lenithia.glider.sender.objects.SenderResponse;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;

public class CustomSenderResponseListener {

    private final GliderVelocity glider;

    @Inject
    public CustomSenderResponseListener(GliderVelocity glider) {
        this.glider = glider;
    }

    @Subscribe
    public void onSenderResponse(SenderResponseEvent event) {
        // Only handle SUCCESS and EPIC_FAIL responses
        if (event.getSender().getSenderResponse() == SenderResponse.SUCCESS) {
            handleSuccess(event);
            event.setHandled(true);
        } else if (event.getSender().getSenderResponse() == SenderResponse.EPIC_FAIL) {
            handleEpicFail(event);
            event.setHandled(true);
        }
        // Other responses will use default handling
    }

    private void handleSuccess(SenderResponseEvent event) {
        GServer bestServer = event.getSender().getBestServer();
        if (bestServer != null) {
            for (Player player : event.getSender().getPlayers()) {
                player.sendMessage(Component.text("✓ Connected to ", NamedTextColor.GREEN)
                        .append(Component.text(bestServer.getRegisteredServer().getServerInfo().getName(), NamedTextColor.GOLD)));

                player.createConnectionRequest(bestServer.getRegisteredServer()).connect();

                // Log the transfer
                glider.getLogger().info("Player " + player.getUsername() + " transferred to " +
                        bestServer.getRegisteredServer().getServerInfo().getName());
            }
        }
    }

    private void handleEpicFail(SenderResponseEvent event) {
        for (Player player : event.getSender().getPlayers()) {
            player.sendMessage(Component.text("❌ Transfer failed!", NamedTextColor.RED));
            glider.getLogger().severe("Epic fail occurred when transferring player: " + player.getUsername());
        }
    }
}